const has_nextlistener = document.querySelector('#has-next');

    if (has_nextlistener) {
        has_nextlistener.addEventListener('click', function(event) {
            event.preventDefault();
            alert("Has next clicked");
        });
    } else {
        console.error('Element with ID "has-next" not found.');
    }


    const nextlistener = document.getElementById('next-page');

    if (nextlistener) {
        nextlistener.addEventListener('click', function(event) {
            event.preventDefault();
            alert("Next page clicked");
        });
    } else {
        console.error('Element with ID "next-page" not found.');
    }


fetch(`/getposts?page=${meta.total_pages}&per_page=${itemsPerPage}`)
            .then(response => response.json())
            .then(data => {
                // Access the meta data
                const meta = data.meta;
            
                add_post(data.data);
                add_navBar(meta);
            })
            .catch(error => console.error(error));



{% if page_obj.has_previous %}
    <a href="?page=1">&laquo; first</a>
    <a href="?page={{ page_obj.previous_page_number }}">previous</a>
{% endif %}

<span class="current">
    Page {{ page_obj.number }} of {{ page_obj.paginator.num_pages }}.
</span>

{% if page_obj.has_next %}
    <a href="?page={{ page_obj.next_page_number }}">next</a>
    <a href="?page={{ page_obj.paginator.num_pages }}">last &raquo;</a>
{% endif %}


/* const kws = [
    'example1',
    'example2',
    'example3',
    // Add more kw objects as needed
]; 

const container = document.querySelector('#dynamic-posts');
if (container) {
    const fragment = document.createDocumentFragment();
    kws.forEach(content1 => {
        const post1 = document.createElement('pre');
        post1.innerHTML = content1;
        fragment.appendChild(post1);
    });
    container.appendChild(fragment);
} else {
    console.error('Element with ID "dynamic-posts" not found.');
}

*/


fetch(`/getposts?page=${page}&per_page=${itemsPerPage}`)
    .then(response => response.json())
    .then(data => add_post(data.data));


.catch(error => console.error(error));

const kws = [
    'example1',
    'example2',
    'example3',
    // Add more kw objects as needed
];


<div id="posts">
            {% block content %}
            {% for kw in page_obj %}<pre id={{kw}}>{{kw}}</pre>{% endfor %}
            {% endblock %}
</div>

// Iterate over the kws array and create HTML elements
page_obj.object_list.forEach(content1 => {
    const post1 = document.createElement('div');
    post1.id = content1;
    post1.className="post";
    post1.innerHTML = content1;
    document.querySelector('#posts').append(post1);
    
});






const kws = [
    'example1',
    'example2',
    'example3',
    // Add more kw objects as needed
];


kws.forEach(content1 => {
    const post1 = document.createElement('pre');
    
    
    post1.innerHTML = content1;
    document.querySelector('#dynamic-posts').append(post1);
    
});



{% block content %}
            {% for kw in page_obj %}<pre id={{kw}}>{{kw}}</pre>{% endfor %}
            {% endblock %}



page_obj.object_list.forEach(add_post);
console.log(page_obj.object_list); 



path("posts", views.posts, name="posts")
def posts(request):

    # Get start and end points
    start = int(request.GET.get("start") or 0)
    end = int(request.GET.get("end") or (start + 9))

    # Generate list of posts
    data = []
    for i in range(start, end + 1):
        data.append(f"Post #{i}")


    # Artificially delay speed of response
    time.sleep(1)
    paginator = Paginator(data, 5)
    page_obj = paginator.get_page(1)
    print(paginator.page(1).object_list)

    print(page_obj)

    # Return list of posts
    """
    return JsonResponse({
        "posts": page_obj.object_list,
    })
    """

    return render(request, 'network/index.html', {"page_obj": page_obj})




def posts(request):

    # Get start and end points
    start = int(request.GET.get("start") or 0)
    end = int(request.GET.get("end") or (start + 9))

    # Generate list of posts
    data = []
    for i in range(start, end + 1):
        data.append(f"Post #{i}")


    # Artificially delay speed of response
    time.sleep(1)
    paginator = Paginator(data, 5)

    # Return list of posts
    return JsonResponse({
        "posts": data
    })

      .then(response =>response.json())
                .then(result => {
                    console.log(result)
                    const stat= JSON.stringfy(result);
                });



                document.addEventListener('DOMContentLoaded', function() {

                    document.querySelectorAll('form').forEach(function(form) {
                        form.addEventListener('submit', function(event) {
                            event.preventDefault();
                            var formId = this.id;
                            
                            console.log('Form with ID ' + formId + ' was submitted');
                            console.log("Nah testing jimbrutta")
                            if(formId==='new-post-form')
                            {
                               
                                let post_text = document.querySelector('#compose-post').value;
                
                                console.log("Post text is" + post_text)
                                console.log("Formid is " + formId)
                
                                
                                fetch('', {
                                    method: 'POST',
                                    body: JSON.stringify({
                                        post_text: post_text,
                                        form_id: formId
                                    }),
                                    credentials: 'same-origin',
                
                                });
                                
                              
                                
                                
                            }
                            
                        });
                    });
                });
                